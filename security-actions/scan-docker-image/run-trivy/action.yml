name: Trivy Docker Scan
description: Scan a Docker image using Trivy from a private ECR repository
author: 'KONG'

inputs:
  scan_image:
    description: 'Docker image or tar file to scan'
    required: true
  output_file:
    description: 'Path to save the JSON report (required for JSON output)'
    required: false
  output_format:
    description: 'Specify the output format (e.g., json, table)'
    required: true
    default: json
  fail_build:
    description: 'Fail the build if vulnerability is found (only applicable for table format)'
    required: false
    default: false
    type: choice
    options:
      - 'true'
      - 'false'
  ignore_unfixed:
    description: 'Ignore unfixed vulnerabilities'
    required: false
    default: false
    type: choice
    options:
      - 'true'
      - 'false'
  input_tar:
    description: 'Specify --input if using a tar file instead of an image reference'
    required: false
    default: ''
  trivy_db_cache:
    description: 'GitHub repository containing Trivy DB cache (format: owner/repo@ref). Database should be named `db.tar.gz` on the default branch.'
    required: false
  trivy_db_cache_token:
    description: 'Token for accessing `trivy_db_cache`.'
    required: false
  

runs:
  using: composite
  steps:
    - name: Parse Trivy DB cache input
      if: inputs.trivy_db_cache != ''
      shell: bash
      id: parse_cache
      run: |
        REPO=$(echo "${{ inputs.trivy_db_cache }}" | cut -d'@' -f1)
        REF=$(echo "${{ inputs.trivy_db_cache }}" | cut -d'@' -f2)
        echo "repository=${REPO}" >> $GITHUB_OUTPUT
        echo "ref=${REF}" >> $GITHUB_OUTPUT

      # Issue: https://github.com/aquasecurity/trivy/issues/7938
      # Discussion: https://github.com/aquasecurity/trivy/discussions/7668
      # Fix: Refer https://github.com/aquasecurity/trivy/discussions/7951 usign mirror.gcr.io 
    - name: Install Trivy
      shell: bash
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.58.2

    - name: Checkout Trivy DB cache
      if: inputs.trivy_db_cache != ''
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        repository: ${{ steps.parse_cache.outputs.repository }}
        ref: ${{ steps.parse_cache.outputs.ref }}
        path: trivy-db-cache
        token: ${{ inputs.trivy_db_cache_token }}

    - name: Setup Trivy DB from cache
      if: inputs.trivy_db_cache != ''
      shell: bash
      run: |
        # Create Trivy cache directory
        mkdir -p ~/.cache/trivy/db
        
        # Extract the DB
        cd trivy-db-cache
        tar -xvf db.tar.gz -C ~/.cache/trivy/db
        cd ..
        rm -rf trivy-db-cache

    - name: Generate docker-cis report
      # TODO: Define a tagging mechanism for dependency manager version updates 
      # Also for controlled rollouts
      uses: docker://418272760313.dkr.ecr.us-east-1.amazonaws.com/k-internal/aquasec/trivy:0.58.0
      with:
        entrypoint: trivy
        args: >
          image 
          ${{ inputs.input_tar != '' && '--input ' || '' }}${{ inputs.input_tar != '' && inputs.input_tar || inputs.scan_image }}
          --compliance ${{ env.TRIVY_COMPLIANCE }}
          -f ${{ env.TRIVY_FORMAT }}
          --ignore-unfixed
          -o ${{ env.TRIVY_OUTPUT }}
          --exit-code ${{ env.TRIVY_EXIT_CODE }}
          ${{ inputs.trivy_db_cache != '' && '--cache-dir ~/.cache/trivy --skip-db-update' || '' }}
      env:
        TRIVY_FORMAT: ${{ inputs.output_format }}
        TRIVY_OUTPUT: ${{ inputs.output_file }}
        TRIVY_IGNORE_UNFIXED: ${{ inputs.ignore_unfixed }}
        TRIVY_COMPLIANCE: docker-cis-1.6.0
        TRIVY_EXIT_CODE: ${{ inputs.fail_build == 'true' && '1' || '0' }}
        TRIVY_SKIP_CHECK_UPDATE: 'true'
