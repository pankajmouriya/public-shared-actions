name:  Semgrep SAST
description: Semgrep SAST
author: 'Kong'
inputs:
  additional_config:
    description: 'Provide additional config to semgrep ci command using --config'
    required: false
    default: ''
  codeql_upload:
    description: 'Toggle to upload results to Github code scanning for public repositories'
    required: false
    default: true
    type: choice
    options:
    - 'true'
    - 'false'
  fail_on_findings:
    description: 'Fail build / job on semgrep findings/errors'
    required: false
    default: false
    type: choice
    options:
    - 'true'
    - 'false'
  registry_mode:
    description: 'Authentication mode for registry DockHub and AWS ECR)'
    required: true
    type: choice
    options:
    - 'dockerhub_pat'
    - 'ecr_iam'
    - 'dockerhub'
  image:
    description: "Which Semgrep image name to use (must be in scripts/image-info.json)"
    required: true
  tag:
    description: "Which Semgrep tag to use (must be in scripts/image-info.json)"
    required: true

outputs:
  validated_image:
    description: "Fully qualified Docker image reference"
    

runs:
  using: 'composite'
  steps:

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Validate image + tag
      id: validate_image
      shell: bash
      run: |
        echo "list down all the files"
        ls $GITHUB_WORKSPACE/imageValidation
        cd $GITHUB_WORKSPACE/imageValidation
        chmod +x ./validate-image.js
        result=$(./validate-image.js --registry-mode="${{ inputs.registry_mode }}" --image=${{ inputs.image }} --tag=${{ inputs.tag }} --info-file=${{ github.action_path }}/image-index.json)
        echo "Result value sparrow = $result"
        
        echo "$result" | sed 's/IMAGE=//' > image.txt
        validatedImage=$(cat image.txt)

        echo "validated_image=$validatedImage" >> $GITHUB_OUTPUT
    # - name: Test for valid image and its tag
    #   id: image-script
    #   uses: ./scripts
    #   with:
    #     image: ${{ inputs.image }}
    #     tag: ${{ inputs.tag }}

    - name: SAST Scan
      # TODO: Define a tagging mechanism for dependency manager version updates 
      # Also for controlled rollouts
      shell: bash
      run: |
        echo "Running Docker CLI Image"
        docker run -v "$PWD:/src" -w /src ${{ steps.validate_image.outputs.validated_image }} semgrep ci --config auto --sarif -o semgrep_${{ github.sha }}.sarif --no-autofix ${{ inputs.additional_config }}
      continue-on-error: true


    # Upload grype cve reports
    - name: Upload Semgrep SARIF to Workflow
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: semgrep_sast.zip
        path: |
          semgrep_${{github.sha}}.sarif
        if-no-files-found: warn

    - name: Upload SARIF to Github Code Scanning
      if: ${{ always() && inputs.codeql_upload == 'true' && github.event.repository.visibility == 'public' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: semgrep_${{github.sha}}.sarif
        # Optional category for the results
        # Used to differentiate multiple results for one commit
        category: sast_semgrep
    
    - name: Fail on findings
      if: ${{ always() && inputs.fail_on_findings == 'true' && steps.semgrep.outcome == 'failure' }}
      shell: bash
      run: |
        echo "::error::Semgrep has detected findings. For findings, check workflow artifact: semgrep_sast.zip / Github Security analysis"
        exit 1
